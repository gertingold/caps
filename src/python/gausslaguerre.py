#!/usr/bin/python

from __future__ import division
import numpy as np
from math import sqrt,log
from mpmath import laguerre
from scipy.optimize import brentq
from sys import stderr

def nodes(n):
    left  = 0
    right = n+(n-1)*sqrt(n)

    i = 2
    factor = 2

    while True:
        l = [ (x,laguerre(n,0,x)) for x in np.linspace(left,right,n*factor**i)]

        intervals = []
        for j in range(len(l)-1):
            if l[j][1]*l[j+1][1] < 0:
                intervals.append([l[j][0], l[j+1][0]])

        if len(intervals) == n:
            break
        i += 1

    roots = []
    f = lambda x: laguerre(n,0,x)
    for ab in intervals:
        a,b = ab
        roots.append( brentq(f, a, b) )

    return roots


def wk(n, x):
    return x/((n+1)*laguerre(n+1,0,x))**2


orders = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 125, 150)

print "#ifndef GAUSSLAGUERRE_H"
print "#define GAUSSLAGUERRE_H"
print
print "/* This file was automatically generated by gausslaguerre.py */"
print

#i = 0
#for order in orders:
#    print "#define GAUSSLAGUERRE_ORDER_%d %d" % (order, i)
#    i += 1
#print
#print "#define GAUSSLAGUERE_ORDER_MAX %d" % (len(orders)-1)
#print
#print
print "int gausslaguerre_nodes_weights(int order, double **xk, double **ln_wk);"
print
print

for order in orders:
    print >>stderr, order
    s_xk = "double xk%d[] = {\n" % order
    s_wk = "double ln_wk%d[] = {\n" % order
    xk = nodes(order)
    for x in xk:
        s_xk += "    %.17e,\n" % x
        s_wk += "    %.17e,\n" % log(wk(order,x))

    s_xk = s_xk[:-2] + "\n};"
    s_wk = s_wk[:-2] + "\n};"

    print s_xk
    print
    print s_wk
    print
    print


print "int gausslaguerre_nodes_weights(int order, double **xk, double **ln_wk)"
print "{"
print "    if(order > 0 && order <= %d)" % orders[0]
print "    {"
print "        *xk    = xk%d;"    % orders[0]
print "        *ln_wk = ln_wk%d;" % orders[0]
print "        return %d;"        % orders[0]
print "    }"
for i in range(len(orders)-1):
    print "    else if(order > %d && order <= %d)" % (orders[i], orders[i+1])
    print "    {"
    print "        *xk    = xk%d;"    % orders[i+1]
    print "        *ln_wk = ln_wk%d;" % orders[i+1]
    print "        return %d;"        % orders[i+1]
    print "    }"
print "    else /* max order */"
print "    {"
print "        *xk    = xk%d;"    % orders[-1]
print "        *ln_wk = ln_wk%d;" % orders[-1]
print "        return %d;"        % orders[-1]
print "    }"
print "}"
print
print "#endif"
