#!/usr/bin/python

from __future__ import division
from mpmath import *

mp.dps = 100

def prettyprint(x, length=20):
    return str(x)[:length]


def lnLambda(l1,l2,m):
    return log(sqrt( (2*l1+1)*(2*l2+1)*factorial(l1-m)*factorial(l2-m) /( factorial(l1+m)*factorial(l2+m)*l1*(l1+1)*l2*(l2+1) ) ))


if __name__ == "__main__":
    print("""/* file automatically generated by src/tests/test_Lambda.py */
#include "libcaps.h"
#include "unittest.h"

#include "test_lnLambda.h"

int test_caps_lnLambda(void)
{
    unittest_t test;
    unittest_init(&test, "caps_lnLambda", "Lambda function", 1e-10);
""")

    l = []

    for l1 in (1,2,3,5,10,50,100,500,1000,5000,10000,20000,50000,100000):
        for l2 in (1,2,3,5,10,50,100,500,1000,5000,10000,20000,50000,100000):
            if l1 >= l2:
                for m in (0,1,2,5,10,50,100,500,1000,5000):
                    if l2 >= m:
                        l.append((l1,l2,m))


    for l1,l2,m in l:
        s = prettyprint(lnLambda(l1,l2,m))
        print("    AssertAlmostEqual(&test, caps_lnLambda(%d,%d,%d), %s);" % (l1,l2,m,s))


    print("""
    return test_results(&test, stderr);
}
""")
